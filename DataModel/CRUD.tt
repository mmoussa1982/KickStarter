<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="..\CodeGenerator\GeneratorHelper.ttinclude"#>

<#
const string inputFile = @"InishCore.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	EntitySetBase entitySet = container.BaseEntitySets.FirstOrDefault(set => set.ElementType == entity);
    fileManager.StartNewFile(entitySet.Name + "Manager.Gen.cs");
	var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);
    var collectionNavigationProperties = typeMapper.GetCollectionNavigationProperties(entity);
    var complexProperties = typeMapper.GetComplexProperties(entity);
	var simpleProperties = typeMapper.GetSimpleProperties(entity);
	EdmProperty primaryKey = null;
	foreach (var edmProperty in simpleProperties)
	{
		if(ef.IsKey(edmProperty))
		{
		 primaryKey = edmProperty;
		 break;
		}
	}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#="Mahmoud Moussa"#>
//
// <#="To Be Added"#>
// <#="To Be Added"#>
// </auto-generated>
//------------------------------------------------------------------------------
<#
	BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
using System.Linq;
using Inish.Models;
using Inish.Common.Logging;
using System.Collections.Generic;


<#=codeStringGenerator.EntityManagerClassOpening(entity,entitySet)#>
{
	private static <#=entitySet.Name#>Manager _<#=entitySet.Name.ToLower()#>Manager;
	
	private <#=entitySet.Name#>Manager()
	{

	}
	public <#=typeMapper.GetTypeName(primaryKey.TypeUsage)#> Add<#=code.Escape(entity.Name)#>(<#=code.Escape(entity.Name)#> _<#=entity.Name.ToLower()#>)
	{
		try
            {
			using (<#=code.Escape(container)#> _context = new <#=code.Escape(container)#>())
			{
				if(_<#=entity.Name.ToLower()#> == null)
				{
					throw new InishException(ExceptionTypes.Logic, "_<#=entity.Name#> Can't be Null");
				}
                if (_<#=entity.Name.ToLower()#>.<#=code.Escape(primaryKey)#> != 0)
                {
                    throw new InishException(ExceptionTypes.Logic, "_<#=entity.Name#> id Must Be 0 or null");
                }
<#
foreach (var edmProperty in simpleProperties)
{
	if(edmProperty.Name == "CreatedOn")
	{
	#>
				_<#=entity.Name.ToLower()#>.CreatedOn = DateTime.Now;
	<#
	}
	if(edmProperty.Name == "UpdatedOn")
	{
	#>
				_<#=entity.Name.ToLower()#>.UpdatedOn = DateTime.Now;
	<#
	}
}
#>
                _context.<#=entitySet.Name#>.Add(_<#=entity.Name.ToLower()#>);

				_context.SaveChanges();
                return _<#=entity.Name.ToLower()#>.<#=code.Escape(primaryKey)#>;
                }
            }
            catch(Exception ex)
            {
                throw new InishException(ExceptionTypes.System, "Exception While Adding <#=entity.Name#>", ex);
            }
	}

	public int BulkAdd<#=code.Escape(entity.Name)#>(ICollection<<#=code.Escape(entity.Name)#>> _<#=entity.Name.ToLower()#>Collection)
	{
		try
            {
			using (<#=code.Escape(container)#> _context = new <#=code.Escape(container)#>())
			{
			foreach(<#=code.Escape(entity.Name)#> _<#=entity.Name.ToLower()#> in _<#=entity.Name.ToLower()#>Collection)
			{
				if(_<#=entity.Name.ToLower()#> == null)
				{
					throw new InishException(ExceptionTypes.Logic, "_<#=entity.Name#> Can't be Null");
				}
                
<#
foreach (var edmProperty in simpleProperties)
{
	if(edmProperty.Name == "CreatedOn")
	{
	#>
				if (_<#=entity.Name.ToLower()#>.<#=code.Escape(primaryKey)#> == 0)
                {
					_<#=entity.Name.ToLower()#>.CreatedOn = DateTime.Now;    
                }
				
	<#
	}
	if(edmProperty.Name == "UpdatedOn")
	{
	#>
				_<#=entity.Name.ToLower()#>.UpdatedOn = DateTime.Now;
	<#
	}
}
#>
                _context.<#=entitySet.Name#>.Add(_<#=entity.Name.ToLower()#>);
				}
				
                return _context.SaveChanges();
                }
            }
            catch(Exception ex)
            {
                throw new InishException(ExceptionTypes.System, "Exception While Adding <#=entity.Name#>", ex);
            }
	}

	public <#=code.Escape(entity.Name)#> Update<#=code.Escape(entity.Name)#>(<#=code.Escape(entity.Name)#> _<#=entity.Name.ToLower()#>)
	{
		try
            {
			using (<#=code.Escape(container)#> _context = new <#=code.Escape(container)#>())
			{
				if(_<#=entity.Name.ToLower()#> == null)
				{
					throw new InishException(ExceptionTypes.Logic, "_<#=entity.Name#> Can't be Null");
				}
				if (_<#=entity.Name.ToLower()#>.<#=code.Escape(primaryKey)#> == 0)
                {
                    throw new InishException(ExceptionTypes.Logic, "_<#=entity.Name#> <#=code.Escape(primaryKey)#> Must Be A Number");
                }
				var result = _context.<#=entitySet.Name#>.Find(_<#=entity.Name.ToLower()#>.<#=code.Escape(primaryKey)#>);
				if (result != null)
				{
<#
foreach (var edmProperty in simpleProperties)
{
	if(!ef.IsKey(edmProperty))
	{
	if((edmProperty.Documentation == null || 
	(edmProperty.Documentation.LongDescription != "DontUpdate")) && edmProperty.Name != "CreatedOn" )
	{
		if(edmProperty.Name != "UpdatedOn")
		{
#>
					if(_<#=entity.Name.ToLower()#>.<#=code.Escape(edmProperty)#> != null)
					{
						result.<#=code.Escape(edmProperty)#> = _<#=entity.Name.ToLower()#>.<#=code.Escape(edmProperty)#>;
					}
<#}else
{#>
					result.<#=code.Escape(edmProperty)#> = DateTime.Now;
<#}}
	
}}#>
					_context.SaveChanges();
						return result;

				}
				else
				{
						throw new InishException(ExceptionTypes.Logic, string.Format("_<#=entity.Name#> with ID ={0} Is not there",_<#=entity.Name.ToLower()#>.<#=code.Escape(primaryKey)#>));
				}
			
			}
			}
			catch(Exception ex)
            {
                throw new InishException(ExceptionTypes.System, "Exception While Updating <#=entity.Name#>", ex);
            }
	}

	public <#=code.Escape(entity.Name)#> Get<#=code.Escape(entity.Name)#>By<#=code.Escape(primaryKey).ToUpper()#>(int _<#=code.Escape(primaryKey)#>)
	{
		try
        {
			using (<#=code.Escape(container)#> _context = new <#=code.Escape(container)#>())
			{
			var result = _context.<#=entitySet.Name#>.Where(u=> u.<#=code.Escape(primaryKey)#> ==_<#=code.Escape(primaryKey)#>).FirstOrDefault();
			if (result != null)
			{
				return result;
			}
			return null;
			}
		}
		catch(Exception ex)
		{
			throw new InishException(ExceptionTypes.Logic, string.Format("_<#=entity.Name#> with ID ={0} Is not there",_<#=code.Escape(primaryKey)#>),ex);
		}
	}

	public ICollection<<#=code.Escape(entity.Name)#>> Get<#=code.Escape(entitySet.Name)#>()
	{
		try
        {
			using (<#=code.Escape(container)#> _context = new <#=code.Escape(container)#>())
			{
			var result = _context.<#=entitySet.Name#>.ToList();
			if (result != null)
			{
				return result;
			}
			return null;
			}
		}
		catch(Exception ex)
		{
			throw new InishException(ExceptionTypes.Logic, "Error While Retreieveing <#=entity.Name#>.",ex);
		}
	}
<#foreach (var edmProperty in simpleProperties)
{
	if(edmProperty.Documentation != null && edmProperty.Documentation.LongDescription.Contains("Search"))
	{
#>
public ICollection<<#=entity.Name#>> SearchBy<#=edmProperty.Name#>(<#=typeMapper.GetTypeName(edmProperty.TypeUsage)#> term)
{
	try
	{
	using (<#=code.Escape(container)#> _context = new <#=code.Escape(container)#>())
			{
		var result = _context.<#=entitySet.Name#>.Where(p => p.<#=edmProperty.Name#>.Contains(term)).Select(p=>p).ToList();
		
		return result;
		
		}
	}catch(Exception ex)
	{
		throw new InishException(ExceptionTypes.Logic, string.Format("Error While Searching <#=entity.Name#> By Term: '{0}'.",term),ex);
	}
}
<#}
	if(edmProperty.Documentation != null && edmProperty.Documentation.LongDescription.Contains("Get"))
	{
#>
	public ICollection<<#=entity.Name#>> Get<#=code.Escape(entitySet.Name)#>By<#=edmProperty.Name#>(<#=typeMapper.GetTypeName(edmProperty.TypeUsage)#> <#=edmProperty.Name#>)
	{
		try
		{
		using (<#=code.Escape(container)#> _context = new <#=code.Escape(container)#>())
			{
			var result = _context.<#=entitySet.Name#>.Where(p => p.<#=edmProperty.Name#> == <#=edmProperty.Name#>).Select(p=>p).ToList();
			
			return result;
			}
		}catch(Exception ex)
		{
			throw new InishException(ExceptionTypes.Logic, string.Format("Error While Retrieving <#=entity.Name#> By <#=edmProperty.Name#>: '{0}'.",<#=edmProperty.Name#>),ex);
		}
	}
<#}
}#>
	

	public static <#=entitySet.Name#>Manager Instance
	{
		get
		{
		if(_<#=entitySet.Name.ToLower()#>Manager == null)
		{
			_<#=entitySet.Name.ToLower()#>Manager = new <#=entitySet.Name#>Manager();
		}
		return _<#=entitySet.Name.ToLower()#>Manager;
		}
	}

}
<#
	EndNamespace(code);

	
}
fileManager.Process();
#>
<#+
public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}#>

<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}#>






