<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="D:\MyWorx\Projects\Inish\Inish\CodeGenerator\GeneratorHelper.ttinclude"#>
<#@ output extension="gen.cs"#>
<#

const string inputFile = @"D:\\MyWorx\\Projects\\Inish\\Inish\\Inish.Data.Core\\InishCore.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
var itemCollection = loader.CreateEdmItemCollection(inputFile);

var modelNamespace = loader.GetModelNamespace(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();

if (container == null)
{
    return string.Empty;
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#

var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#
    PushIndent("    ");
}

#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using Inish.Models;
using Inish.Models.API;
using System.Collections.Generic;


public partial class TypeMapper
{
	private static TypeMapper _instance = null;

<#
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	
#>
public <#=apiClassName(entity.Name)#> Get<#=apiClassName(entity.Name)#>ApiFromDB<#=entity.Name#>(<#=entity.Name#> _<#=entity.Name#>)
{
	<#=apiClassName(entity.Name)#> _<#=apiClassName(entity.Name)#> = new <#=apiClassName(entity.Name)#>();
<#
	var simpleProperties = typeMapper.GetSimpleProperties(entity);
	foreach(var simpleProperty in simpleProperties)
	{
	if(simpleProperty.Documentation == null || !simpleProperty.Documentation.LongDescription.Contains("Hide"))
		{
#>
	_<#=apiClassName(entity.Name)#>.<#=propertyName(simpleProperty.Name)#> = _<#=entity.Name#>.<#=simpleProperty.Name#>;
<#
}}
var navigationProperties = typeMapper.GetNavigationProperties(entity);
foreach(var navProperties in navigationProperties)
	{
	if(navProperties.Documentation == null || !navProperties.Documentation.LongDescription.Contains("Hide"))
		{
		if(typeMapper.GetTypeName(navProperties.TypeUsage).Contains("Collection"))
		{
		#>
		if(_<#=entity.Name#>.<#=navProperties.Name#> != null && _<#=entity.Name#>.<#=navProperties.Name#>.Count > 0)
		{
			_<#=apiClassName(entity.Name)#>.<#=propertyName(navProperties.Name)#> =	GetSub<#=apiClassName(typeMapper.GetTypeName(navProperties.TypeUsage).Substring(typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<')+1,  typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('>') - typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<') - 1))#>ApiCollectionFromDB<#=typeMapper.GetTypeName(navProperties.TypeUsage).Substring(typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<')+1,  typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('>') - typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<') - 1)#>Collection(_<#=entity.Name#>.<#=navProperties.Name#>,typeof(<#=entity#>));
		}
		<#
		}
		else
		{
		#>
			if(_<#=entity.Name#>.<#=navProperties.Name#> != null )
			{
				_<#=apiClassName(entity.Name)#>.<#=propertyName(navProperties.Name)#> = GetSub<#=apiClassName(apiClassName(typeMapper.GetTypeName(navProperties.TypeUsage)))#>ApiFromDB<#=typeMapper.GetTypeName(navProperties.TypeUsage)#>(_<#=entity.Name#>.<#=navProperties.Name#>,typeof(<#=entity#>));
			}
		<#
		}
		}
		}
#>
		


return _<#=apiClassName(entity.Name)#>;
}

private <#=apiClassName(entity.Name)#> GetSub<#=apiClassName(entity.Name)#>ApiFromDB<#=entity.Name#>(<#=entity.Name#> _<#=entity.Name#>,Type ParentType)
{
	<#=apiClassName(entity.Name)#> _<#=apiClassName(entity.Name)#> = new <#=apiClassName(entity.Name)#>();
<#
	
	foreach(var simpleProperty in simpleProperties)
	{
	if(simpleProperty.Documentation == null || !simpleProperty.Documentation.LongDescription.Contains("Hide"))
		{
#>
	_<#=apiClassName(entity.Name)#>.<#=propertyName(simpleProperty.Name)#> = _<#=entity.Name#>.<#=simpleProperty.Name#>;
<#
}}
navigationProperties = typeMapper.GetNavigationProperties(entity);
foreach(var navProperties in navigationProperties)
	{
	if(navProperties.Documentation == null || !navProperties.Documentation.LongDescription.Contains("Hide"))
		{
		if(typeMapper.GetTypeName(navProperties.TypeUsage).Contains("Collection"))
		{
		#>
		if(_<#=entity.Name#>.<#=navProperties.Name#> != null && _<#=entity.Name#>.<#=navProperties.Name#>.Count > 0 && ParentType != typeof(<#=typeMapper.GetTypeName(navProperties.TypeUsage).Substring(typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<')+1,  typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('>') - typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<') - 1)#>))
		{
			_<#=apiClassName(entity.Name)#>.<#=propertyName(navProperties.Name)#> =	GetSub<#=apiClassName(typeMapper.GetTypeName(navProperties.TypeUsage).Substring(typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<')+1,  typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('>') - typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<') - 1))#>ApiCollectionFromDB<#=typeMapper.GetTypeName(navProperties.TypeUsage).Substring(typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<')+1,  typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('>') - typeMapper.GetTypeName(navProperties.TypeUsage).LastIndexOf('<') - 1)#>Collection(_<#=entity.Name#>.<#=navProperties.Name#>,typeof(<#=entity#>));
		}
		<#
		}
		else
		{
		#>
			if(_<#=entity.Name#>.<#=navProperties.Name#> != null && ParentType != typeof(<#=navProperties.TypeUsage#>))
			{
				_<#=apiClassName(entity.Name)#>.<#=propertyName(navProperties.Name)#> = GetSub<#=apiClassName(apiClassName(typeMapper.GetTypeName(navProperties.TypeUsage)))#>ApiFromDB<#=typeMapper.GetTypeName(navProperties.TypeUsage)#>(_<#=entity.Name#>.<#=navProperties.Name#>,typeof(<#=entity#>));
			}
		<#
		}
		}
		}
#>
		


return _<#=apiClassName(entity.Name)#>;
}

public ICollection<<#=apiClassName(entity.Name)#>> Get<#=apiClassName(entity.Name)#>ApiCollectionFromDB<#=entity.Name#>Collection(ICollection<<#=entity.Name#>> _<#=entity.Name#>Collection)
{
	List<<#=apiClassName(entity.Name)#>> <#=apiClassName(entity.Name)#>collection = new List<<#=apiClassName(entity.Name)#>>();
	foreach(<#=entity.Name#> record in _<#=entity.Name#>Collection)
	{
		<#=apiClassName(entity.Name)#>collection.Add(Get<#=apiClassName(entity.Name)#>ApiFromDB<#=entity.Name#>(record));
	}
	return <#=apiClassName(entity.Name)#>collection;
}

private ICollection<<#=apiClassName(entity.Name)#>> GetSub<#=apiClassName(entity.Name)#>ApiCollectionFromDB<#=entity.Name#>Collection(ICollection<<#=entity.Name#>> _<#=entity.Name#>Collection,Type ParentType)
{
	List<<#=apiClassName(entity.Name)#>> <#=apiClassName(entity.Name)#>collection = new List<<#=apiClassName(entity.Name)#>>();
	foreach(<#=entity.Name#> record in _<#=entity.Name#>Collection)
	{
		<#=apiClassName(entity.Name)#>collection.Add(GetSub<#=apiClassName(entity.Name)#>ApiFromDB<#=entity.Name#>(record,ParentType));
	}
	return <#=apiClassName(entity.Name)#>collection;
}

public ICollection<<#=entity.Name#>> GetDB<#=entity.Name#>CollectionFrom<#=apiClassName(entity.Name)#>CollectionApi(ICollection<<#=apiClassName(entity.Name)#>> _<#=apiClassName(entity.Name)#>Collection)
{
	List<<#=entity.Name#>> <#=entity.Name#>collection = new List<<#=entity.Name#>>();
	foreach(<#=apiClassName(entity.Name)#> record in _<#=apiClassName(entity.Name)#>Collection)
	{
		<#=entity.Name#>collection.Add(GetDB<#=entity.Name#>FromApi<#=entity.Name#>(record));
	}
	return <#=entity.Name#>collection;
}


public <#=entity.Name#> GetDB<#=entity.Name#>FromApi<#=entity.Name#>(<#=apiClassName(entity.Name)#> _<#=apiClassName(entity.Name)#>)
{
	<#=entity.Name#> _<#=entity.Name#> = new <#=entity.Name#>();
<#
	
	foreach(var simpleProperty in simpleProperties)
	{
	if(simpleProperty.Documentation == null || !simpleProperty.Documentation.LongDescription.Contains("Hide"))
		{
#>
	_<#=entity.Name#>.<#=simpleProperty.Name#> = _<#=apiClassName(entity.Name)#>.<#=propertyName(simpleProperty.Name)#>;
<#
}
}
#>
return _<#=entity.Name#>;
}
<#
}#>

	public static TypeMapper Instance
	{
		get
		{
			if(_instance == null)
			{
				_instance  = new TypeMapper();
			}
			return _instance;
		}
	}
}
}


<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

private string InterfaceName(string name)
        {
            return "i" + name;
        }

        private string propertyName(string name)
        {
            string output = "";
            int i = 0;
			bool previousIsUpper = false;
            foreach (char c in name)
            {
                if(i==0)
                {
                    output = Char.ToLower(c).ToString();
                }
                else
                {
                    if(Char.IsUpper(c))
                    {
						if(previousIsUpper)
						{
							previousIsUpper = true;
							output += Char.ToLower(c).ToString();
						}
						else
						{
							previousIsUpper = true;
							output += "_" + Char.ToLower(c).ToString();
						}
                    }
                    else
                    {
						previousIsUpper = false;
                        output += c.ToString();
                    }
                }
                i = 1;
            }
            return output;
        }
        private string apiClassName(string name)
        {
            string output = "";
            int i = 0;
            foreach (char c in name)
            {
                if (i == 0)
                {
                    output = Char.ToLower(c).ToString();
                }
                else
                {
                    output += c.ToString();
                }
                i = 1;
            }
            return output;
        }
#>